<translation-unit>
  <external-declaration>*

<external-declaration>
  <function-definition>
  <declaration>

<function-definition>
  <declaration-specifier> <declarator> <declaration>* <compound-statement>

<declaration-specifier>
  <storage-class-specifier>
  <type-specifier>
  <type-qualifier>

<storage-class-specifier>
  "auto"
  "register"
  "static"
  "extern"
  "typedef"

<type-specifier>
  "void"
  "char"
  "short"
  "int"
  "long"
  "float"
  "double"
  "signed"
  "unsigned"
  <struct-or-union-specifier>
  <identifier>

<struct-or-union-specifier>
  <struct-or-union> <struct-or-union-specifier-rhs>

<struct-or-union>
  "struct"
  "union"

<struct-or-union-specifier-rhs>
  <identifier>? <struct-or-union-specifier-rhs-declaration>
  [identifier]

<identifier>
  [identifier]

<struct-or-union-specifier-rhs-declaration>
  "{" <struct-declaration>+ "}"

<struct-declaration>
  <specifier-qualifier>* <struct-declarator-list>

<specifier-qualifier>
  <type-specifier>
  <type-qualifier>

<struct-declarator-list>
  <struct-declarator> <comma-struct-declarator>*

<struct-declarator>
  ":" <constant-expression>
  <declarator> ":" <constant-expression>
  <declarator>

<comma-struct-declarator>
  "," <struct-declarator>

<declarator>
  <pointer>? <direct-declarator>

<pointer>
  "*" <type-qualifier>* <pointer>?

<type-qualifier>
  "const"
  "volatile"

<direct-declarator>
  <direct-declarator-lhs> <direct-declarator-rhs>*

<direct-declarator-lhs>
  [identifier]
  "(" <declarator> ")"

<direct-declarator-rhs>
  "[" <constant-expression>? "]"
  "(" <parameter-type-list> ")"
  "(" <identifier>* ")"

<constant-expression>
  <conditional-expression>

<conditional-expression>
  <logical-or-expression> <conditional-expression-rhs>?

<conditional-expression-rhs>
  "?" <expression> ":" <conditional-expression>

<logical-or-expression>
  <logical-and-expression> <logical-or-expression-rhs>*

<logical-or-expression-rhs>
  "||" <logical-and-expression>

<logical-and-expression>
  <inclusive-or-expression> <logical-and-expression-rhs>*

<logical-and-expression-rhs>
  "&&" <inclusive-or-expression>

<inclusive-or-expression>
  <exclusive-or-expression> <inclusive-or-expression-rhs>*

<inclusive-or-expression-rhs>
  "|" <exclusive-or-expression>

<exclusive-or-expression>
  <and-expression> <exclusive-or-expression-rhs>*

<exclusive-or-expression-rhs>
  "^" <and-expression>

<and-expression>
  <equality-expression> <and-expression-rhs>*

<and-expression-rhs>
  "&" <equality-expression>

<equality-expression>
  <relational-expression> <equality-expression-rhs>*

<equality-expression-rhs>
  "==" <relational-expression>
  "!=" <relational-expression>

<relational-expression>
  <shift-expression> <relational-expression-rhs>*

<relational-expression-rhs>
  ">" <shift-expression>
  "<" <shift-expression>
  ">=" <shift-expression>
  "<=" <shift-expression>

<shift-expression>
  <additive-expression> <shift-expression-rhs>*

<shift-expression-rhs>
  "<<" <additive-expression>
  ">>" <additive-expression>

<additive-expression>
  <multiplicative-expression> <additive-expression-rhs>*

<additive-expression-rhs>
  "+" <multiplicative-expression>
  "-" <multiplicative-expression>

<multiplicative-expression>
  <cast-expression> <multiplicative-expression-rhs>*

<multiplicative-expression-rhs>
  "*" <cast-expression>
  "/" <cast-expression>
  "%" <cast-expression>

<cast-expression>
  <unary-expression>
  "(" <type-name> ")" <cast-expression>

<unary-expression>
  "++" <unary-expression>
  "--" <unary-expression>
  "sizeof" <unary-expression>
  "sizeof" <type-name>
  <unary-operator> <cast-expression>
  <assignment-operator> <expression>
  <postfix-expression>

<unary-operator>
  "&"
  "*"
  "+"
  "-"
  "~"
  "!"

<postfix-expression>
  <primary-expression> <postfix-expression-rhs>*

<postfix-expression-rhs>
  "++"
  "--"
  "[" <expression> "]"
  "(" <expression>* ")"
  "." <identifier>
  "->" <identifier>

<primary-expression>
  <identifier>
  <number-constant>
  <string-constant>
  "(" <expression> ")"

<number-constant>
  [number]

<string-constant>
  [string]

<expression>
  <conditional-expression> <expression-rhs>*

<expression-rhs>
  "," <conditional-expression>

<assignment-operator>
  "="
  "*="
  "/="
  "%="
  "+="
  "-="
  "<<="
  ">>="
  "&="
  "^="
  "|="

<type-name>
  <specifier-qualifier>+ <abstract-declarator>?

<parameter-type-list>
  <parameter-list> <parameter-type-list-rhs>?

<parameter-type-list-rhs>
  "," "..."

<parameter-list>
  <parameter-declaration> <parameter-list-rhs>*

<parameter-list-rhs>
  "," <parameter-declaration>

<parameter-declaration>
  <declaration-specifier>+ <declarator-or-abstract-declarator>?

<declarator-or-abstract-declarator>
  <declarator>
  <abstract-declarator>

<abstract-declarator>
  <pointer> <direct-abstract-declarator>?
  <direct-abstract-declarator>

<direct-abstract-declarator>
  "(" <abstractor-declarator> ")"

<compound-statement>
  "{" <declaration>* <statement>* "}"

<statement>
  <expression-statement>
  <jump-statement>

<expression-statement>
  <expression> ";"

<jump-statement>
  "return" <expression>? ";"

<declaration>
  <declaration-specifier>+ <init-declarator>* ";"

<init-declarator>
  <declarator> <init-declarator-rhs>?

<init-declarator-rhs>
  "=" <initializer>

<initializer>
  <assignment-expression>

